### direct log messages to stdout ### 
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.Target=System.out 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n 
   
### direct messages to file hibernate.log ### 
#log4j.appender.file=org.apache.log4j.FileAppender 
#log4j.appender.file.File=hibernate.log 
#log4j.appender.file.layout=org.apache.log4j.PatternLayout 
#log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n 

log4j.appender.controller = org.apache.log4j.DailyRollingFileAppender
log4j.appender.controller.File = logs/controller.log
log4j.appender.controller.Append = true
log4j.appender.controller.layout = org.apache.log4j.PatternLayout
log4j.appender.controller.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [%p] - [%l]  %m%n

log4j.appender.service = org.apache.log4j.DailyRollingFileAppender
log4j.appender.service.File = logs/service.log
log4j.appender.service.Append = true
log4j.appender.service.layout = org.apache.log4j.PatternLayout
log4j.appender.service.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [%p] - [%l]  %m%n

log4j.appender.dao = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dao.File = logs/dao.log
log4j.appender.dao.Append = true
log4j.appender.dao.layout = org.apache.log4j.PatternLayout
log4j.appender.dao.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [%p] - [%l]  %m%n

log4j.appender.dwr = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dwr.File = logs/dwr.log
log4j.appender.dwr.Append = true
log4j.appender.dwr.layout = org.apache.log4j.PatternLayout
log4j.appender.dwr.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [%p] - [%l]  %m%n

log4j.appender.cms = org.apache.log4j.DailyRollingFileAppender
log4j.appender.cms.File = logs/cms.log
log4j.appender.cms.Append = true
log4j.appender.cms.layout = org.apache.log4j.PatternLayout
log4j.appender.cms.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} - [%p] - [%l]  %m%n

## log4j.appender.controller.layout.ConversionPattern ##解释
## %m   输出代码中指定的消息
## %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
## %r   输出自应用启动到输出该log信息耗费的毫秒数 
## %c   输出所属的类目，通常就是所在类的全名 
## %t   输出产生该日志事件的线程名 
## %n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
## %d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
## %l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 


### set log levels - for more verbose logging change 'info' to 'debug' ### 
   
log4j.rootLogger=warn, stdout 

#log4j.logger.com.edeas.controller=debug, controller
#log4j.logger.com.edeas.dao=debug, dao
#log4j.logger.com.edeas.service=debug, service
#log4j.logger.com.edeas.dwr=debug, dwr
log4j.logger.com.edeas=debug, cms
   
#log4j.logger.org.hibernate=info 
#log4j.logger.org.hibernate=debug 
   
### log HQL query parser activity 
#log4j.logger.org.hibernate.hql.ast.AST=debug 
   
### log just the SQL 
#log4j.logger.org.hibernate.SQL=debug 
   
### log JDBC bind parameters ### 
#log4j.logger.org.hibernate.type=info 
#log4j.logger.org.hibernate.type=debug 
log4j.logger.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 
   
### log schema export/update ### 
log4j.logger.org.hibernate.tool.hbm2ddl=debug 
   
### log HQL parse trees 
#log4j.logger.org.hibernate.hql=debug 
   
### log cache activity ### 
#log4j.logger.org.hibernate.cache=debug 
   
### log transaction activity 
#log4j.logger.org.hibernate.transaction=debug 
   
### log JDBC resource acquisition 
#log4j.logger.org.hibernate.jdbc=debug 
   
### enable the following line if you want to track down connection ### 
### leakages when using DriverManagerConnectionProvider ### 
#log4j.logger.org.hibernate.connection.DriverManagerConnectionProvider=trace